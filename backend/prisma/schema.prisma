// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(cuid())
  // 你的其他用户字段...

  wallets  Wallet[]
  orders   Order[] // 反向一对多：一个用户有多个订单
  referral Referral?
}

model Product {
  id String @id @default(cuid())
  // 你的其他产品字段...

  inventoryLots InventoryLot[]
  orders        Order[] // 反向一对多：一个产品有多个订单
  redemptions   Redemption[]
}

model Order {
  id           String   @id @default(cuid())
  userId       String
  productId    String
  qty          Int
  amountFiat   Decimal  @db.Decimal(18, 2)
  amountCrypto Decimal  @db.Decimal(18, 8)
  amount       Decimal  @default(0) @db.Decimal(18, 2)
  status       String
  payRef       String?
  createdAt    DateTime @default(now())

  // 关键：补上三条关系的“反向字段”
  user        User         @relation(fields: [userId], references: [id])
  product     Product      @relation(fields: [productId], references: [id])
  commissions Commission[]

  @@index([userId])
  @@index([productId])
}

model Commission {
  id      String @id @default(cuid())
  orderId String
  // 你的其他佣金字段...

  // 已有：指向 Order 的关系
  order Order @relation(fields: [orderId], references: [id])
}

model Wallet {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Referral {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model InventoryLot {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Redemption {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
